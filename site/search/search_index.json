{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Training index \u00b6 Web Security: OAuth And OpenID Connect AWS Solutions Architect Associate Git Essential Training: The Basics Git: Branches, Merges, and Remotes","title":"Training index"},{"location":"#training-index","text":"Web Security: OAuth And OpenID Connect AWS Solutions Architect Associate Git Essential Training: The Basics Git: Branches, Merges, and Remotes","title":"Training index"},{"location":"AWS/0-AWS-Solutions-Architect-Associate/","text":"AWS Solutions Architect (Associate) \u00b6 AWS Management Console AWS Documentation AWS Sample Exam Questions AWS Certified Solutions Architect Associate Practice Exams Exam Tips Cloud Services Overview Storage Design VPC (Virtual Private Cloud) Compute Services IAM (Identity and Access Management) Auto Scaling and Virtual Network Services Application Deployment Databases Services and Design Scenarios","title":"AWS Solutions Architect (Associate)"},{"location":"AWS/0-AWS-Solutions-Architect-Associate/#aws-solutions-architect-associate","text":"AWS Management Console AWS Documentation AWS Sample Exam Questions AWS Certified Solutions Architect Associate Practice Exams Exam Tips Cloud Services Overview Storage Design VPC (Virtual Private Cloud) Compute Services IAM (Identity and Access Management) Auto Scaling and Virtual Network Services Application Deployment Databases Services and Design Scenarios","title":"AWS Solutions Architect (Associate)"},{"location":"AWS/0-Exam-Tips/","text":"Exam Tips \u00b6 Architecting, deploying, defining and giving guidance. How do I do it in a secure way? Core cloud services. 90% \u00b6 Compute : how you can do computing tasks within AWS. Networking : different ways to deal with networking. Storeage : live storage (s3 buckets), archive storage (Amazon Glacier) and EBS volumes Databases : RDS (Relational Database Services) Exam knowledge areas \u00b6 Designed Resilient Architectures . S3 and Glacier, EBS volumes, etc. 34% Storage Decoupling mechanisms Multi-tier architectures Hight availability and fault tolerance Define Performant Architectures . 24% Storage and databases Caching Elasticity and scalability Specify secure applications and architectures . VPCs, subnets, etc. 26% Secure application tiers Secure data Network infrastructure Design Cost-optimized Architectures . 10% Storage Compute Define Operationally Excellent Architectures . 6%","title":"Exam Tips"},{"location":"AWS/0-Exam-Tips/#exam-tips","text":"Architecting, deploying, defining and giving guidance. How do I do it in a secure way?","title":"Exam Tips"},{"location":"AWS/0-Exam-Tips/#core-cloud-services-90","text":"Compute : how you can do computing tasks within AWS. Networking : different ways to deal with networking. Storeage : live storage (s3 buckets), archive storage (Amazon Glacier) and EBS volumes Databases : RDS (Relational Database Services)","title":"Core cloud services. 90%"},{"location":"AWS/0-Exam-Tips/#exam-knowledge-areas","text":"Designed Resilient Architectures . S3 and Glacier, EBS volumes, etc. 34% Storage Decoupling mechanisms Multi-tier architectures Hight availability and fault tolerance Define Performant Architectures . 24% Storage and databases Caching Elasticity and scalability Specify secure applications and architectures . VPCs, subnets, etc. 26% Secure application tiers Secure data Network infrastructure Design Cost-optimized Architectures . 10% Storage Compute Define Operationally Excellent Architectures . 6%","title":"Exam knowledge areas"},{"location":"AWS/1-Cloud-Services-Overview/","text":"1. Cloud Services Overview \u00b6","title":"1. Cloud Services Overview"},{"location":"AWS/1-Cloud-Services-Overview/#1-cloud-services-overview","text":"","title":"1. Cloud Services Overview"},{"location":"AWS/2-Storage-Design/","text":"2. Storage Design \u00b6","title":"2. Storage Design"},{"location":"AWS/2-Storage-Design/#2-storage-design","text":"","title":"2. Storage Design"},{"location":"AWS/3-Virtual-Private-Cloud/","text":"3. VPC (Virtual Private Cloud) \u00b6","title":"3. VPC (Virtual Private Cloud)"},{"location":"AWS/3-Virtual-Private-Cloud/#3-vpc-virtual-private-cloud","text":"","title":"3. VPC (Virtual Private Cloud)"},{"location":"AWS/4-Compute-Services/","text":"4. Compute Services \u00b6","title":"4. Compute Services"},{"location":"AWS/4-Compute-Services/#4-compute-services","text":"","title":"4. Compute Services"},{"location":"AWS/5-Identity-and-Access-Management/","text":"5. IAM (Identity and Access Management) \u00b6","title":"5. IAM (Identity and Access Management)"},{"location":"AWS/5-Identity-and-Access-Management/#5-iam-identity-and-access-management","text":"","title":"5. IAM (Identity and Access Management)"},{"location":"AWS/6-Auto-Scaling-and-Virtual-Network-Services/","text":"6. Auto Scaling and Virtual Network Services \u00b6","title":"6. Auto Scaling and Virtual Network Services"},{"location":"AWS/6-Auto-Scaling-and-Virtual-Network-Services/#6-auto-scaling-and-virtual-network-services","text":"","title":"6. Auto Scaling and Virtual Network Services"},{"location":"AWS/7-Application-Deployment/","text":"7. Application Deployment \u00b6","title":"7. Application Deployment"},{"location":"AWS/7-Application-Deployment/#7-application-deployment","text":"","title":"7. Application Deployment"},{"location":"AWS/8-Databases/","text":"8. Databases \u00b6","title":"8. Databases"},{"location":"AWS/8-Databases/#8-databases","text":"","title":"8. Databases"},{"location":"AWS/9-Services-and-Design-Scenarios/","text":"9. Services and Design Scenarios \u00b6","title":"9. Services and Design Scenarios"},{"location":"AWS/9-Services-and-Design-Scenarios/#9-services-and-design-scenarios","text":"","title":"9. Services and Design Scenarios"},{"location":"Git/Git-Essential-Training_The-Basics/","text":"Git Essential Training: The Basics \u00b6 Configuration \u00b6 Install git from https://git-scm.com System : C:\\Program Files\\Git\\etc\\gitconfig: git config --system User : C:\\Users\\rniet.gitconfig: git config --global Project : my_project/.git/config: git config Other configuration settings: git config --global user.name \"Rafael Nieto\" git config --global user.email \"rnietoe@gmail.com\" git config --global core.editor \"code --wait\"` git config --list Other basic commands: change to my user directory: cd ~ list all items (hidden as well): ls -la display a text file cat .gitconfig Getting started \u00b6 Initialize and clone a repository git init git clone https://github.com/rnietoe/Training.git Stage and commit changes git add . git commit -m \"commit message\" git log commands git log git log - 2 git log --since=2020-04-04 git log --until=2020-04-04 git log --until=\"3 days ago\" git log --author=\"Rafael\" git log --grep=\"bug\" git log --oneline git log - p git log --stat git log --format=medium git log --format=short git log --format=oneline git log --graph --all --oneline --decorated Git Concepts and Architecture \u00b6 Make hanges to files \u00b6 Status \u00b6 git status Untracked : created but unstagged yet Added : created and stagged (\"cached\") Modified Deleted Renamed Differences \u00b6 compare the staging tree and your working directory git diff compare the repository and the staging tree: git diff --stagged show only the words that are different: git diff --color-words Use Visal Studio or Visual Studio Code as difference viewer Other changes \u00b6 remove the file from the working directory and stage the change in a single git command: git rm filename rename filename as newname and stage the change in a single git command: git mv filename newname Commit all \u00b6 Stage and commit all changes from working directory directly to the repository (instead to the staging tree) git commit -all git commit -am \"commit message\" it does not include untracked files Inspect a commit \u00b6 git show HEAD git show commitID git show commitID --color-words where commitID is the first characters of commit Id (6 to 8 characters are enough) Use space or f to go forward in the paginator, and b to go backward, and q to quit. Compare commits \u00b6 git diff commitID1..HEAD git diff commitID1..commitID2 git diff commitID1..commitID2 --color-words Multiline commit message \u00b6 git commit -a because of we didn't specify the message parameter, the .git/COMMIT_EDITMSG file is opened in our editor to enter a multiline commit message. When git/COMMIT_EDITMSG file is closed, the commit is executed. The commit is aborted if commit message is empty. Undo changes \u00b6 To discard changes in the working directory: git checkout -- \"filename\" git checkout -- . Above command does not check out any branch. Instead, it checks out a single file or every file, from the repository To discard changes in the staging tree: git reset HEAD filename Above command unstage changes from the staging tree to the working directory. Amend/Edit commits \u00b6 git commit --amend -m \"new commit message\" take what's in staging and add it to the latest commit amend command is also usefull to update the message of the latest commit Retrieve old versions \u00b6 Retrieve files with changes of desired commit ID git checkout commitId -- . git checkout commitId -- filename Revert a commit \u00b6 git revert commitID Remove untracked \u00b6 remove untracked files from the working directory git clean -n # display what would be removed git clean -f # remove untracked files Ignore files \u00b6 project/.gitignore using: regexp with: * ? [aeiou] [0-9]. Sample of ignore all log files from logs directory: logs/*.log.[0-9] negative expressions with !: Sample of ignore all php files with *.php, but do not ignore index file with !index.php trailing slash /: Sample of ignore all files in a directory: asset/videos/ # This is a comment in the project/.gitignore file We should ignore: compiled source code packages and compressed files logs and databases Operative System generated files User-uploaded assets (images, PDFs, videos) .gitignore templates \u00b6 https://github.com/github/gitignore Ignore files globally \u00b6 Ignore files globally (instead by project): git config --global core.excludesfile ~/.gitignore_global Ignore files to be tracked \u00b6 git rm --cached filename Track empty directories \u00b6 Create .gitkeep file to track empty directories touch dirname/.gitkeep","title":"Git Essential Training: The Basics"},{"location":"Git/Git-Essential-Training_The-Basics/#git-essential-training-the-basics","text":"","title":"Git Essential Training: The Basics"},{"location":"Git/Git-Essential-Training_The-Basics/#configuration","text":"Install git from https://git-scm.com System : C:\\Program Files\\Git\\etc\\gitconfig: git config --system User : C:\\Users\\rniet.gitconfig: git config --global Project : my_project/.git/config: git config Other configuration settings: git config --global user.name \"Rafael Nieto\" git config --global user.email \"rnietoe@gmail.com\" git config --global core.editor \"code --wait\"` git config --list Other basic commands: change to my user directory: cd ~ list all items (hidden as well): ls -la display a text file cat .gitconfig","title":"Configuration"},{"location":"Git/Git-Essential-Training_The-Basics/#getting-started","text":"Initialize and clone a repository git init git clone https://github.com/rnietoe/Training.git Stage and commit changes git add . git commit -m \"commit message\" git log commands git log git log - 2 git log --since=2020-04-04 git log --until=2020-04-04 git log --until=\"3 days ago\" git log --author=\"Rafael\" git log --grep=\"bug\" git log --oneline git log - p git log --stat git log --format=medium git log --format=short git log --format=oneline git log --graph --all --oneline --decorated","title":"Getting started"},{"location":"Git/Git-Essential-Training_The-Basics/#git-concepts-and-architecture","text":"","title":"Git Concepts and Architecture"},{"location":"Git/Git-Essential-Training_The-Basics/#make-hanges-to-files","text":"","title":"Make hanges to files"},{"location":"Git/Git-Essential-Training_The-Basics/#status","text":"git status Untracked : created but unstagged yet Added : created and stagged (\"cached\") Modified Deleted Renamed","title":"Status"},{"location":"Git/Git-Essential-Training_The-Basics/#differences","text":"compare the staging tree and your working directory git diff compare the repository and the staging tree: git diff --stagged show only the words that are different: git diff --color-words Use Visal Studio or Visual Studio Code as difference viewer","title":"Differences"},{"location":"Git/Git-Essential-Training_The-Basics/#other-changes","text":"remove the file from the working directory and stage the change in a single git command: git rm filename rename filename as newname and stage the change in a single git command: git mv filename newname","title":"Other changes"},{"location":"Git/Git-Essential-Training_The-Basics/#commit-all","text":"Stage and commit all changes from working directory directly to the repository (instead to the staging tree) git commit -all git commit -am \"commit message\" it does not include untracked files","title":"Commit all"},{"location":"Git/Git-Essential-Training_The-Basics/#inspect-a-commit","text":"git show HEAD git show commitID git show commitID --color-words where commitID is the first characters of commit Id (6 to 8 characters are enough) Use space or f to go forward in the paginator, and b to go backward, and q to quit.","title":"Inspect a commit"},{"location":"Git/Git-Essential-Training_The-Basics/#compare-commits","text":"git diff commitID1..HEAD git diff commitID1..commitID2 git diff commitID1..commitID2 --color-words","title":"Compare commits"},{"location":"Git/Git-Essential-Training_The-Basics/#multiline-commit-message","text":"git commit -a because of we didn't specify the message parameter, the .git/COMMIT_EDITMSG file is opened in our editor to enter a multiline commit message. When git/COMMIT_EDITMSG file is closed, the commit is executed. The commit is aborted if commit message is empty.","title":"Multiline commit message"},{"location":"Git/Git-Essential-Training_The-Basics/#undo-changes","text":"To discard changes in the working directory: git checkout -- \"filename\" git checkout -- . Above command does not check out any branch. Instead, it checks out a single file or every file, from the repository To discard changes in the staging tree: git reset HEAD filename Above command unstage changes from the staging tree to the working directory.","title":"Undo changes"},{"location":"Git/Git-Essential-Training_The-Basics/#amendedit-commits","text":"git commit --amend -m \"new commit message\" take what's in staging and add it to the latest commit amend command is also usefull to update the message of the latest commit","title":"Amend/Edit commits"},{"location":"Git/Git-Essential-Training_The-Basics/#retrieve-old-versions","text":"Retrieve files with changes of desired commit ID git checkout commitId -- . git checkout commitId -- filename","title":"Retrieve old versions"},{"location":"Git/Git-Essential-Training_The-Basics/#revert-a-commit","text":"git revert commitID","title":"Revert a commit"},{"location":"Git/Git-Essential-Training_The-Basics/#remove-untracked","text":"remove untracked files from the working directory git clean -n # display what would be removed git clean -f # remove untracked files","title":"Remove untracked"},{"location":"Git/Git-Essential-Training_The-Basics/#ignore-files","text":"project/.gitignore using: regexp with: * ? [aeiou] [0-9]. Sample of ignore all log files from logs directory: logs/*.log.[0-9] negative expressions with !: Sample of ignore all php files with *.php, but do not ignore index file with !index.php trailing slash /: Sample of ignore all files in a directory: asset/videos/ # This is a comment in the project/.gitignore file We should ignore: compiled source code packages and compressed files logs and databases Operative System generated files User-uploaded assets (images, PDFs, videos)","title":"Ignore files"},{"location":"Git/Git-Essential-Training_The-Basics/#gitignore-templates","text":"https://github.com/github/gitignore","title":".gitignore templates"},{"location":"Git/Git-Essential-Training_The-Basics/#ignore-files-globally","text":"Ignore files globally (instead by project): git config --global core.excludesfile ~/.gitignore_global","title":"Ignore files globally"},{"location":"Git/Git-Essential-Training_The-Basics/#ignore-files-to-be-tracked","text":"git rm --cached filename","title":"Ignore files to be tracked"},{"location":"Git/Git-Essential-Training_The-Basics/#track-empty-directories","text":"Create .gitkeep file to track empty directories touch dirname/.gitkeep","title":"Track empty directories"},{"location":"Git/Git_Branches-Merges-and-Remotes/","text":"Git: Branches, Merges, and Remotes \u00b6 Tree-ish \u00b6 Git references \u00b6 SHA1 hash: the commit ID HEAD Branch Tag Ancestry Parents: abcd1234^, master^, HEAD^, HEAD~1, HEAD~ Grandparent: abcd1234^^, master^^, HEAD^^, HEAD~2 Grat-Grandprarents: abcd1234^^^, master^^^, HEAD^^^, HEAD~3 git show HEAD^ git show HEAD^^ git show HEAD~3 Tree Listing \u00b6 List of blobs (binary large object = file) and trees (tree = directory) of a tree git ls-tree HEAD git ls-tree HEAD^ git ls-tree HEAD tree/ Filter the commit log after a commitID to HEAD git log abcd1234.. git log abcd1234..HEAD git log <SHA>..<SHA> Filter the commit log by file or directory git log filename git log dirname Branches \u00b6 Create a new branch: git branch branch_name Note that new branch and its parent branch are the same at the moment. There are not differences because there were not commits at the moment. List all branches. Currently checkout branch is shown in green color: git branch Switch branches git checkout branch_name Switch to a new branch git checkout -b branch_name Switching options with uncommited changes: commit the changes to the current branch checkout the file again and remove the changes stash the changes As a general rule, the older branch should go firsts, so changes shown have occurred since that point in time. Find out which other branches already have merged all their commits into this branch git branch --merged Find out which other branches have NOT merged their commits into this branch yet git branch --no-merged Rename branches git branch -m new_branch_name Delete branches git branch -d branch_name Cannot delete the checked out branch Cannot delete branches not fully merged. Instead, use capital -D , but commits in the branch will be lost.","title":"Git: Branches, Merges, and Remotes"},{"location":"Git/Git_Branches-Merges-and-Remotes/#git-branches-merges-and-remotes","text":"","title":"Git: Branches, Merges, and Remotes"},{"location":"Git/Git_Branches-Merges-and-Remotes/#tree-ish","text":"","title":"Tree-ish"},{"location":"Git/Git_Branches-Merges-and-Remotes/#git-references","text":"SHA1 hash: the commit ID HEAD Branch Tag Ancestry Parents: abcd1234^, master^, HEAD^, HEAD~1, HEAD~ Grandparent: abcd1234^^, master^^, HEAD^^, HEAD~2 Grat-Grandprarents: abcd1234^^^, master^^^, HEAD^^^, HEAD~3 git show HEAD^ git show HEAD^^ git show HEAD~3","title":"Git references"},{"location":"Git/Git_Branches-Merges-and-Remotes/#tree-listing","text":"List of blobs (binary large object = file) and trees (tree = directory) of a tree git ls-tree HEAD git ls-tree HEAD^ git ls-tree HEAD tree/ Filter the commit log after a commitID to HEAD git log abcd1234.. git log abcd1234..HEAD git log <SHA>..<SHA> Filter the commit log by file or directory git log filename git log dirname","title":"Tree Listing"},{"location":"Git/Git_Branches-Merges-and-Remotes/#branches","text":"Create a new branch: git branch branch_name Note that new branch and its parent branch are the same at the moment. There are not differences because there were not commits at the moment. List all branches. Currently checkout branch is shown in green color: git branch Switch branches git checkout branch_name Switch to a new branch git checkout -b branch_name Switching options with uncommited changes: commit the changes to the current branch checkout the file again and remove the changes stash the changes As a general rule, the older branch should go firsts, so changes shown have occurred since that point in time. Find out which other branches already have merged all their commits into this branch git branch --merged Find out which other branches have NOT merged their commits into this branch yet git branch --no-merged Rename branches git branch -m new_branch_name Delete branches git branch -d branch_name Cannot delete the checked out branch Cannot delete branches not fully merged. Instead, use capital -D , but commits in the branch will be lost.","title":"Branches"},{"location":"Security/Web-Security-OAuth-And-OpenID-Connect/","text":"Web Security: OAuth and OpenID Connect \u00b6 https://www.linkedin.com/learning/web-security-oauth-and-openid-connect?u=1009514 OAuth 2.0 Servers Map of OAuth 2.0 Specs Aaron Parecki's book OAuth 2.0 Simplified What is OAuth? \u00b6 Some OAuth Servers: https://oauth2.thephpleague.com https://developers.google.com/oauthplayground https://openidconnect.net https://developer.okta.com A token introspection tool: https://www.jsonwebtoken.io flow = grant type scopes = permissions AuthZ with: API keys Id & Secret OAuth OpenID Connect (OIDC) is an OAuth 2.0 identity extension \u2013 only for users. Core Terminology \u00b6 Main OAuth extensions /authorize : grant permission to the resource. Could return an authZ code or an access token /token : trade an authZ code or refresh token for an access token /revoke : deactivate (invalidate) a token. Valid for access or refresh tokens /instrospect : learn more about the token /register : create new OAuth clients /userinfo : retrieve profile information about the authenticated user /.well-known/openid-configuration : which endpoints are support by our OAuth server Main OAuth tokens Access token: gives the client application access to the protected resource, usually the API Refresh token: used to request a new access token when this expires ID Token (included with OIDC): user profile information JWT (Json Web Token) iss : the issuer of the token, an entity we trust sub : the subject (user) of the token aud : the audience which should consume the token exp : expiration time of the token Claims: a key/value pair within the token that gives the client application information Client Credentials: AuthZ for microservices \u00b6 Private clients only where secrets are in backend code; not appropiate for web pages or mobiles apps Must use secure communications TLS no user relationship validate access token against the /instrospect endpoint expired token has to be rejected Implicit or Hybrid: AuthZ for mobile devices \u00b6 Attach the user to the process cookie/session storage AppAuth and Passport for Android or iOS Must use secure communications TLS use of redirect_uri Authorization Code \u00b6 get an Auth Code instead of an access token. The third-party application never sees our credentials. The end user never sees the access token. Resource Owner Password Flow \u00b6 recommended only for updating legacy systems danger! credentials are managed by the application itself Server side implementations \u00b6","title":"Web Security: OAuth and OpenID Connect"},{"location":"Security/Web-Security-OAuth-And-OpenID-Connect/#web-security-oauth-and-openid-connect","text":"https://www.linkedin.com/learning/web-security-oauth-and-openid-connect?u=1009514 OAuth 2.0 Servers Map of OAuth 2.0 Specs Aaron Parecki's book OAuth 2.0 Simplified","title":"Web Security: OAuth and OpenID Connect"},{"location":"Security/Web-Security-OAuth-And-OpenID-Connect/#what-is-oauth","text":"Some OAuth Servers: https://oauth2.thephpleague.com https://developers.google.com/oauthplayground https://openidconnect.net https://developer.okta.com A token introspection tool: https://www.jsonwebtoken.io flow = grant type scopes = permissions AuthZ with: API keys Id & Secret OAuth OpenID Connect (OIDC) is an OAuth 2.0 identity extension \u2013 only for users.","title":"What is OAuth?"},{"location":"Security/Web-Security-OAuth-And-OpenID-Connect/#core-terminology","text":"Main OAuth extensions /authorize : grant permission to the resource. Could return an authZ code or an access token /token : trade an authZ code or refresh token for an access token /revoke : deactivate (invalidate) a token. Valid for access or refresh tokens /instrospect : learn more about the token /register : create new OAuth clients /userinfo : retrieve profile information about the authenticated user /.well-known/openid-configuration : which endpoints are support by our OAuth server Main OAuth tokens Access token: gives the client application access to the protected resource, usually the API Refresh token: used to request a new access token when this expires ID Token (included with OIDC): user profile information JWT (Json Web Token) iss : the issuer of the token, an entity we trust sub : the subject (user) of the token aud : the audience which should consume the token exp : expiration time of the token Claims: a key/value pair within the token that gives the client application information","title":"Core Terminology"},{"location":"Security/Web-Security-OAuth-And-OpenID-Connect/#client-credentials-authz-for-microservices","text":"Private clients only where secrets are in backend code; not appropiate for web pages or mobiles apps Must use secure communications TLS no user relationship validate access token against the /instrospect endpoint expired token has to be rejected","title":"Client Credentials: AuthZ for microservices"},{"location":"Security/Web-Security-OAuth-And-OpenID-Connect/#implicit-or-hybrid-authz-for-mobile-devices","text":"Attach the user to the process cookie/session storage AppAuth and Passport for Android or iOS Must use secure communications TLS use of redirect_uri","title":"Implicit or Hybrid: AuthZ for mobile devices"},{"location":"Security/Web-Security-OAuth-And-OpenID-Connect/#authorization-code","text":"get an Auth Code instead of an access token. The third-party application never sees our credentials. The end user never sees the access token.","title":"Authorization Code"},{"location":"Security/Web-Security-OAuth-And-OpenID-Connect/#resource-owner-password-flow","text":"recommended only for updating legacy systems danger! credentials are managed by the application itself","title":"Resource Owner Password Flow"},{"location":"Security/Web-Security-OAuth-And-OpenID-Connect/#server-side-implementations","text":"","title":"Server side implementations"}]}