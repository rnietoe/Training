{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Training index \u00b6 Web Security: OAuth And OpenID Connect AWS Solutions Architect Associate Git Essential Training: The Basics Git: Branches, Merges, and Remotes Git Intermediate Techniques","title":"Training index"},{"location":"#training-index","text":"Web Security: OAuth And OpenID Connect AWS Solutions Architect Associate Git Essential Training: The Basics Git: Branches, Merges, and Remotes Git Intermediate Techniques","title":"Training index"},{"location":"AWS/0-AWS-Solutions-Architect-Associate/","text":"AWS Solutions Architect (Associate) \u00b6 AWS Management Console AWS Documentation AWS Sample Exam Questions AWS Certified Solutions Architect Associate Practice Exams Exam Tips Cloud Services Overview Storage Design VPC (Virtual Private Cloud) Compute Services IAM (Identity and Access Management) Auto Scaling and Virtual Network Services Application Deployment Databases Services and Design Scenarios","title":"AWS Solutions Architect (Associate)"},{"location":"AWS/0-AWS-Solutions-Architect-Associate/#aws-solutions-architect-associate","text":"AWS Management Console AWS Documentation AWS Sample Exam Questions AWS Certified Solutions Architect Associate Practice Exams Exam Tips Cloud Services Overview Storage Design VPC (Virtual Private Cloud) Compute Services IAM (Identity and Access Management) Auto Scaling and Virtual Network Services Application Deployment Databases Services and Design Scenarios","title":"AWS Solutions Architect (Associate)"},{"location":"AWS/0-Exam-Tips/","text":"Exam Tips \u00b6 Architecting, deploying, defining and giving guidance. How do I do it in a secure way? Core cloud services. 90% \u00b6 Compute : how you can do computing tasks within AWS. Networking : different ways to deal with networking. Storeage : live storage (s3 buckets), archive storage (Amazon Glacier) and EBS volumes Databases : RDS (Relational Database Services) Exam knowledge areas \u00b6 Designed Resilient Architectures . S3 and Glacier, EBS volumes, etc. 34% Storage Decoupling mechanisms Multi-tier architectures Hight availability and fault tolerance Define Performant Architectures . 24% Storage and databases Caching Elasticity and scalability Specify secure applications and architectures . VPCs, subnets, etc. 26% Secure application tiers Secure data Network infrastructure Design Cost-optimized Architectures . 10% Storage Compute Define Operationally Excellent Architectures . 6%","title":"Exam Tips"},{"location":"AWS/0-Exam-Tips/#exam-tips","text":"Architecting, deploying, defining and giving guidance. How do I do it in a secure way?","title":"Exam Tips"},{"location":"AWS/0-Exam-Tips/#core-cloud-services-90","text":"Compute : how you can do computing tasks within AWS. Networking : different ways to deal with networking. Storeage : live storage (s3 buckets), archive storage (Amazon Glacier) and EBS volumes Databases : RDS (Relational Database Services)","title":"Core cloud services. 90%"},{"location":"AWS/0-Exam-Tips/#exam-knowledge-areas","text":"Designed Resilient Architectures . S3 and Glacier, EBS volumes, etc. 34% Storage Decoupling mechanisms Multi-tier architectures Hight availability and fault tolerance Define Performant Architectures . 24% Storage and databases Caching Elasticity and scalability Specify secure applications and architectures . VPCs, subnets, etc. 26% Secure application tiers Secure data Network infrastructure Design Cost-optimized Architectures . 10% Storage Compute Define Operationally Excellent Architectures . 6%","title":"Exam knowledge areas"},{"location":"AWS/1-Cloud-Services-Overview/","text":"1. Cloud Services Overview \u00b6","title":"1. Cloud Services Overview"},{"location":"AWS/1-Cloud-Services-Overview/#1-cloud-services-overview","text":"","title":"1. Cloud Services Overview"},{"location":"AWS/2-Storage-Design/","text":"2. Storage Design \u00b6","title":"2. Storage Design"},{"location":"AWS/2-Storage-Design/#2-storage-design","text":"","title":"2. Storage Design"},{"location":"AWS/3-Virtual-Private-Cloud/","text":"3. VPC (Virtual Private Cloud) \u00b6","title":"3. VPC (Virtual Private Cloud)"},{"location":"AWS/3-Virtual-Private-Cloud/#3-vpc-virtual-private-cloud","text":"","title":"3. VPC (Virtual Private Cloud)"},{"location":"AWS/4-Compute-Services/","text":"4. Compute Services \u00b6","title":"4. Compute Services"},{"location":"AWS/4-Compute-Services/#4-compute-services","text":"","title":"4. Compute Services"},{"location":"AWS/5-Identity-and-Access-Management/","text":"5. IAM (Identity and Access Management) \u00b6","title":"5. IAM (Identity and Access Management)"},{"location":"AWS/5-Identity-and-Access-Management/#5-iam-identity-and-access-management","text":"","title":"5. IAM (Identity and Access Management)"},{"location":"AWS/6-Auto-Scaling-and-Virtual-Network-Services/","text":"6. Auto Scaling and Virtual Network Services \u00b6","title":"6. Auto Scaling and Virtual Network Services"},{"location":"AWS/6-Auto-Scaling-and-Virtual-Network-Services/#6-auto-scaling-and-virtual-network-services","text":"","title":"6. Auto Scaling and Virtual Network Services"},{"location":"AWS/7-Application-Deployment/","text":"7. Application Deployment \u00b6","title":"7. Application Deployment"},{"location":"AWS/7-Application-Deployment/#7-application-deployment","text":"","title":"7. Application Deployment"},{"location":"AWS/8-Databases/","text":"8. Databases \u00b6","title":"8. Databases"},{"location":"AWS/8-Databases/#8-databases","text":"","title":"8. Databases"},{"location":"AWS/9-Services-and-Design-Scenarios/","text":"9. Services and Design Scenarios \u00b6","title":"9. Services and Design Scenarios"},{"location":"AWS/9-Services-and-Design-Scenarios/#9-services-and-design-scenarios","text":"","title":"9. Services and Design Scenarios"},{"location":"Git/1-Git-Essential-Training_The-Basics/","text":"Git Essential Training: The Basics \u00b6 Configuration \u00b6 Install git from https://git-scm.com System : C:\\Program Files\\Git\\etc\\gitconfig: git config --system --list User : C:\\Users\\rniet.gitconfig: git config --global --list Project : my_project/.git/config: git config --list Other configuration settings: git config --global user.name \"Rafael Nieto\" git config --global user.email \"rnietoe@gmail.com\" git config --global core.editor \"code --wait\"` git config --list Other basic commands: change to my user directory: cd ~ list all items (hidden as well): ls -la display a text file cat .gitconfig Getting started \u00b6 Initialize and clone a repository git init git clone https://github.com/rnietoe/Training.git git clone https://github.com/rnietoe/Training.git local_repository_name Stage and commit changes git add . git commit -m \"commit message\" git log commands git log git log - 2 git log --since=2020-04-04 git log --until=2020-04-04 git log --until=\"3 days ago\" git log - L 100 , 150 : filename . txt git log --author=\"Rafael\" git log --grep=\"bug\" git log --oneline git log --stat git log --format=medium git log --format=short git log --format=oneline git log --graph --all --oneline --decorated List logs as patches (diff) git log --pathces git log -p Git Concepts and Architecture \u00b6 Make changes to files \u00b6 Status \u00b6 git status Untracked : created but unstagged yet Added : created and stagged (\"cached\") Modified Deleted Renamed Differences \u00b6 compare the staging tree and your working directory git diff compare the repository and the staging tree: git diff --stagged show only the words that are different: git diff --color-words Other changes \u00b6 remove the file from the working directory and stage the change in a single git command: git rm filename rename filename as newname and stage the change in a single git command: git mv filename newname Commit all \u00b6 Stage and commit all changes from working directory directly to the repository (instead to the staging tree) git commit -all git commit -am \"commit message\" it does not include untracked files Multiline commit message \u00b6 git commit -a Because of we didn't specify the message parameter, the .git/COMMIT_EDITMSG file is opened in our editor to enter a multiline commit message. When git/COMMIT_EDITMSG file is closed, the commit is executed. The commit is aborted if commit message is empty. Inspect a commit \u00b6 git show HEAD git show commitID git show commitID --color-words where commitID is the first characters of commit Id (6 to 8 characters are enough) Use space or f to go forward in the paginator, b to go backward, / to search words and q to quit. Compare commits \u00b6 git diff commitID1..HEAD git diff commitID1..commitID2 git diff commitID1..commitID2 --color-words Undo changes \u00b6 To discard changes in the working directory: git checkout -- \"filename\" git checkout -- . Above command does not check out any branch. Instead, it checks out a single file or every file, from the repository To discard changes in the staging tree (to the working directory): git reset HEAD filename Amend/Edit commits \u00b6 git commit --amend -m \"new commit message\" It takes what's in staging and add it to the latest commit amend command is also usefull to update the message of the latest commit Retrieve old versions \u00b6 Retrieve files with changes of desired commit ID git checkout commitId -- . git checkout commitId -- filename Revert a commit \u00b6 git revert commitID Remove untracked \u00b6 Remove untracked files from the working directory git clean -n # display what would be removed git clean -f # remove untracked files Ignore files \u00b6 project/.gitignore using: regexp with: * ? [aeiou] [0-9]. Sample of ignore all log files from logs directory: logs/*.log.[0-9] negative expressions with !: Sample of ignore all php files with *.php, but do not ignore index file with !index.php trailing slash /: Sample of ignore all files in a directory: asset/videos/ # This is a comment in the project/.gitignore file We should ignore: compiled source code packages and compressed files logs and databases Operative System generated files User-uploaded assets (images, PDFs, videos) .gitignore templates Ignore files globally \u00b6 Ignore files globally (instead by project): git config --global core.excludesfile ~/.gitignore_global Ignore files to be tracked \u00b6 git rm --cached filename Track empty directories \u00b6 Create .gitkeep file to track empty directories touch dirname/.gitkeep","title":"Git Essential Training: The Basics"},{"location":"Git/1-Git-Essential-Training_The-Basics/#git-essential-training-the-basics","text":"","title":"Git Essential Training: The Basics"},{"location":"Git/1-Git-Essential-Training_The-Basics/#configuration","text":"Install git from https://git-scm.com System : C:\\Program Files\\Git\\etc\\gitconfig: git config --system --list User : C:\\Users\\rniet.gitconfig: git config --global --list Project : my_project/.git/config: git config --list Other configuration settings: git config --global user.name \"Rafael Nieto\" git config --global user.email \"rnietoe@gmail.com\" git config --global core.editor \"code --wait\"` git config --list Other basic commands: change to my user directory: cd ~ list all items (hidden as well): ls -la display a text file cat .gitconfig","title":"Configuration"},{"location":"Git/1-Git-Essential-Training_The-Basics/#getting-started","text":"Initialize and clone a repository git init git clone https://github.com/rnietoe/Training.git git clone https://github.com/rnietoe/Training.git local_repository_name Stage and commit changes git add . git commit -m \"commit message\" git log commands git log git log - 2 git log --since=2020-04-04 git log --until=2020-04-04 git log --until=\"3 days ago\" git log - L 100 , 150 : filename . txt git log --author=\"Rafael\" git log --grep=\"bug\" git log --oneline git log --stat git log --format=medium git log --format=short git log --format=oneline git log --graph --all --oneline --decorated List logs as patches (diff) git log --pathces git log -p","title":"Getting started"},{"location":"Git/1-Git-Essential-Training_The-Basics/#git-concepts-and-architecture","text":"","title":"Git Concepts and Architecture"},{"location":"Git/1-Git-Essential-Training_The-Basics/#make-changes-to-files","text":"","title":"Make changes to files"},{"location":"Git/1-Git-Essential-Training_The-Basics/#status","text":"git status Untracked : created but unstagged yet Added : created and stagged (\"cached\") Modified Deleted Renamed","title":"Status"},{"location":"Git/1-Git-Essential-Training_The-Basics/#differences","text":"compare the staging tree and your working directory git diff compare the repository and the staging tree: git diff --stagged show only the words that are different: git diff --color-words","title":"Differences"},{"location":"Git/1-Git-Essential-Training_The-Basics/#other-changes","text":"remove the file from the working directory and stage the change in a single git command: git rm filename rename filename as newname and stage the change in a single git command: git mv filename newname","title":"Other changes"},{"location":"Git/1-Git-Essential-Training_The-Basics/#commit-all","text":"Stage and commit all changes from working directory directly to the repository (instead to the staging tree) git commit -all git commit -am \"commit message\" it does not include untracked files","title":"Commit all"},{"location":"Git/1-Git-Essential-Training_The-Basics/#multiline-commit-message","text":"git commit -a Because of we didn't specify the message parameter, the .git/COMMIT_EDITMSG file is opened in our editor to enter a multiline commit message. When git/COMMIT_EDITMSG file is closed, the commit is executed. The commit is aborted if commit message is empty.","title":"Multiline commit message"},{"location":"Git/1-Git-Essential-Training_The-Basics/#inspect-a-commit","text":"git show HEAD git show commitID git show commitID --color-words where commitID is the first characters of commit Id (6 to 8 characters are enough) Use space or f to go forward in the paginator, b to go backward, / to search words and q to quit.","title":"Inspect a commit"},{"location":"Git/1-Git-Essential-Training_The-Basics/#compare-commits","text":"git diff commitID1..HEAD git diff commitID1..commitID2 git diff commitID1..commitID2 --color-words","title":"Compare commits"},{"location":"Git/1-Git-Essential-Training_The-Basics/#undo-changes","text":"To discard changes in the working directory: git checkout -- \"filename\" git checkout -- . Above command does not check out any branch. Instead, it checks out a single file or every file, from the repository To discard changes in the staging tree (to the working directory): git reset HEAD filename","title":"Undo changes"},{"location":"Git/1-Git-Essential-Training_The-Basics/#amendedit-commits","text":"git commit --amend -m \"new commit message\" It takes what's in staging and add it to the latest commit amend command is also usefull to update the message of the latest commit","title":"Amend/Edit commits"},{"location":"Git/1-Git-Essential-Training_The-Basics/#retrieve-old-versions","text":"Retrieve files with changes of desired commit ID git checkout commitId -- . git checkout commitId -- filename","title":"Retrieve old versions"},{"location":"Git/1-Git-Essential-Training_The-Basics/#revert-a-commit","text":"git revert commitID","title":"Revert a commit"},{"location":"Git/1-Git-Essential-Training_The-Basics/#remove-untracked","text":"Remove untracked files from the working directory git clean -n # display what would be removed git clean -f # remove untracked files","title":"Remove untracked"},{"location":"Git/1-Git-Essential-Training_The-Basics/#ignore-files","text":"project/.gitignore using: regexp with: * ? [aeiou] [0-9]. Sample of ignore all log files from logs directory: logs/*.log.[0-9] negative expressions with !: Sample of ignore all php files with *.php, but do not ignore index file with !index.php trailing slash /: Sample of ignore all files in a directory: asset/videos/ # This is a comment in the project/.gitignore file We should ignore: compiled source code packages and compressed files logs and databases Operative System generated files User-uploaded assets (images, PDFs, videos) .gitignore templates","title":"Ignore files"},{"location":"Git/1-Git-Essential-Training_The-Basics/#ignore-files-globally","text":"Ignore files globally (instead by project): git config --global core.excludesfile ~/.gitignore_global","title":"Ignore files globally"},{"location":"Git/1-Git-Essential-Training_The-Basics/#ignore-files-to-be-tracked","text":"git rm --cached filename","title":"Ignore files to be tracked"},{"location":"Git/1-Git-Essential-Training_The-Basics/#track-empty-directories","text":"Create .gitkeep file to track empty directories touch dirname/.gitkeep","title":"Track empty directories"},{"location":"Git/2-Git_Branches-Merges-and-Remotes/","text":"Git: Branches, Merges, and Remotes \u00b6 Tree-ish \u00b6 Git references \u00b6 SHA1 hash: the commit ID HEAD Branch Tag Ancestry Parents: abcd1234^, master^, HEAD^, HEAD~1, HEAD~ Grandparent: abcd1234^^, master^^, HEAD^^, HEAD~2 Grat-Grandprarents: abcd1234^^^, master^^^, HEAD^^^, HEAD~3 git show HEAD^ git show HEAD^^ git show HEAD~3 Tree Listing \u00b6 List of blobs ( b inary l arge ob ject = file) and trees (tree = directory) of a tree git ls-tree HEAD git ls-tree HEAD^ git ls-tree HEAD tree/ Filter the commit log after a commitID to HEAD git log abcd1234.. git log abcd1234..HEAD git log <SHA>..<SHA> Filter the commit log by file or directory git log filename git log dirname Branches \u00b6 Create a new branch: git branch branch_name Note that new branch and its parent branch are the same at the moment. There are not differences because there were not commits yet. List all branches. Currently checkout branch is shown in green color: git branch Switch branches git checkout branch_name Switch to a new branch git checkout -b branch_name Git rejects to switch with uncommited changes. The options are: commit the changes to the current branch remove the changes checking out the file stash the changes Compare branches \u00b6 git diff master..new_feature git diff --color-words <SHA>..<SHA> As a general rule, the older branch should go firsts, so changes shown have occurred since that point in time. Rename branches git branch -m new_branch_name Delete branches git branch -d branch_name Cannot delete the checked out branch Cannot delete branches not fully merged. Instead, use capital -D , but commits in the branch will be lost. Reset Branches \u00b6 Back up the latest commitID before, in case you want to undo the reset execution Soft reset: Latest commits changes are staged and pending to commit. Useful when you want to back things up in the commit timeline. git reset --soft <SHA> Mixed reset (default reset option): Latest commits changes are unstaged, pending to stage and commit. git reset --mixed <SHA> git reset <SHA> Hard reset: Latest commits changes are nowhere. Useful to permanently undo commits (SHA=commitID) or if you want to make one branch look like another (sha=branchID) git reset --hard <SHA> Create a new branch as backup before a hard reset Merge Branches \u00b6 The merge concept is like a commit to the checked out branch from another branch. Run a merge with a clean working directory: git merge <branch_name> Find out which other branches already have merged all their commits into this branch git branch --merged Find out which other branches have NOT merged their commits into this branch yet git branch --no-merged Use git log --graph --all --oneline --decorated to check how branches were merged A conflict occurs when two different commits have changes in the same line or set of lines. Solutions: Abort merge git merge --abort Resolve the conflict manually git show --color-words git commit Use the merge tool git mergetool Use a graphical user interface tool, like visual studio To reduce conflicts: Keep lines short Keep commmits small and focused Beware edits to whitespace (spaces, tabs, line return) Merge to master often Merge from master (tracking) Stash Changes \u00b6 Create and view stash: git stash save \"stash_name\" git stash list git stash show stash@{0} git stash show -p stash@{0} Apply stash changes to the workgin directory, removing the single stash: git stash pop git stash pop stash@{0} Apply stash changes to the workgin directory, keeping the single stash: git stash apply git stash apply stash@{0} Delete stash (stash that was not deleted using apply ) git stash drop stash@{0} git stash clear ??? git stash -u git stash --include-untracked Colaborate remotely \u00b6 git commit -m \"from-my-computer\" git push git push origin master If you try to do a push and Git rejects it, then you need to fetch, merge, and then push again. git commit -m \"from-remote-server\" git fetch git fetch does not change the local branch. fetch before you start to work everyday fetch before you push fetch before you go offline fetch often git fetch + git merge = git pull git merge Remote repositories \u00b6 Add a remote repository echo \"# repository_name\" >> README.md git init git add README.md git commit -m \"first commit\" git remote add origin git@github.com:rnietoe/repository_name.git git push -u origin master List remote repositories git remote git remote -v cat .git/config Remote branches \u00b6 Add a remote branch git push -u origin master List remote and all branches git branch -r git branch -a Delete remote branches git push origin :branch_name git push origin --delete branch_name Tracking/Untraking remote branch \u00b6 git branch branch_name origin/branch_name git checkout -b branch_name origin/branch_name ??? git branch -u origin/branch_name branch_name git branch --unset-upstream branch_name Push workflow \u00b6 git checkout master git fetch git merge origin/master git merge local_branch git push Next steps \u00b6 Git Aliases for commonly-used commands \u00b6 Add alias \"st = status\" to ~/.gitconfig git config --global alias.st \"status\" Other examples: st = status co = checkout ci = commit br = branch df = diff dfs = diff -stagged logg = log --graph --decorate --oneline --all Set up SSH keys for remote login \u00b6 Authenticating with GitHub from Git Integrated Development Environments (IDEs) \u00b6 Integrate source code editing with Git features Graphical User Interfaces (GUIs) \u00b6 They have a point-and-click interface for performing Git actions.","title":"Git: Branches, Merges, and Remotes"},{"location":"Git/2-Git_Branches-Merges-and-Remotes/#git-branches-merges-and-remotes","text":"","title":"Git: Branches, Merges, and Remotes"},{"location":"Git/2-Git_Branches-Merges-and-Remotes/#tree-ish","text":"","title":"Tree-ish"},{"location":"Git/2-Git_Branches-Merges-and-Remotes/#git-references","text":"SHA1 hash: the commit ID HEAD Branch Tag Ancestry Parents: abcd1234^, master^, HEAD^, HEAD~1, HEAD~ Grandparent: abcd1234^^, master^^, HEAD^^, HEAD~2 Grat-Grandprarents: abcd1234^^^, master^^^, HEAD^^^, HEAD~3 git show HEAD^ git show HEAD^^ git show HEAD~3","title":"Git references"},{"location":"Git/2-Git_Branches-Merges-and-Remotes/#tree-listing","text":"List of blobs ( b inary l arge ob ject = file) and trees (tree = directory) of a tree git ls-tree HEAD git ls-tree HEAD^ git ls-tree HEAD tree/ Filter the commit log after a commitID to HEAD git log abcd1234.. git log abcd1234..HEAD git log <SHA>..<SHA> Filter the commit log by file or directory git log filename git log dirname","title":"Tree Listing"},{"location":"Git/2-Git_Branches-Merges-and-Remotes/#branches","text":"Create a new branch: git branch branch_name Note that new branch and its parent branch are the same at the moment. There are not differences because there were not commits yet. List all branches. Currently checkout branch is shown in green color: git branch Switch branches git checkout branch_name Switch to a new branch git checkout -b branch_name Git rejects to switch with uncommited changes. The options are: commit the changes to the current branch remove the changes checking out the file stash the changes","title":"Branches"},{"location":"Git/2-Git_Branches-Merges-and-Remotes/#compare-branches","text":"git diff master..new_feature git diff --color-words <SHA>..<SHA> As a general rule, the older branch should go firsts, so changes shown have occurred since that point in time. Rename branches git branch -m new_branch_name Delete branches git branch -d branch_name Cannot delete the checked out branch Cannot delete branches not fully merged. Instead, use capital -D , but commits in the branch will be lost.","title":"Compare branches"},{"location":"Git/2-Git_Branches-Merges-and-Remotes/#reset-branches","text":"Back up the latest commitID before, in case you want to undo the reset execution Soft reset: Latest commits changes are staged and pending to commit. Useful when you want to back things up in the commit timeline. git reset --soft <SHA> Mixed reset (default reset option): Latest commits changes are unstaged, pending to stage and commit. git reset --mixed <SHA> git reset <SHA> Hard reset: Latest commits changes are nowhere. Useful to permanently undo commits (SHA=commitID) or if you want to make one branch look like another (sha=branchID) git reset --hard <SHA> Create a new branch as backup before a hard reset","title":"Reset Branches"},{"location":"Git/2-Git_Branches-Merges-and-Remotes/#merge-branches","text":"The merge concept is like a commit to the checked out branch from another branch. Run a merge with a clean working directory: git merge <branch_name> Find out which other branches already have merged all their commits into this branch git branch --merged Find out which other branches have NOT merged their commits into this branch yet git branch --no-merged Use git log --graph --all --oneline --decorated to check how branches were merged A conflict occurs when two different commits have changes in the same line or set of lines. Solutions: Abort merge git merge --abort Resolve the conflict manually git show --color-words git commit Use the merge tool git mergetool Use a graphical user interface tool, like visual studio To reduce conflicts: Keep lines short Keep commmits small and focused Beware edits to whitespace (spaces, tabs, line return) Merge to master often Merge from master (tracking)","title":"Merge Branches"},{"location":"Git/2-Git_Branches-Merges-and-Remotes/#stash-changes","text":"Create and view stash: git stash save \"stash_name\" git stash list git stash show stash@{0} git stash show -p stash@{0} Apply stash changes to the workgin directory, removing the single stash: git stash pop git stash pop stash@{0} Apply stash changes to the workgin directory, keeping the single stash: git stash apply git stash apply stash@{0} Delete stash (stash that was not deleted using apply ) git stash drop stash@{0} git stash clear ??? git stash -u git stash --include-untracked","title":"Stash Changes"},{"location":"Git/2-Git_Branches-Merges-and-Remotes/#colaborate-remotely","text":"git commit -m \"from-my-computer\" git push git push origin master If you try to do a push and Git rejects it, then you need to fetch, merge, and then push again. git commit -m \"from-remote-server\" git fetch git fetch does not change the local branch. fetch before you start to work everyday fetch before you push fetch before you go offline fetch often git fetch + git merge = git pull git merge","title":"Colaborate remotely"},{"location":"Git/2-Git_Branches-Merges-and-Remotes/#remote-repositories","text":"Add a remote repository echo \"# repository_name\" >> README.md git init git add README.md git commit -m \"first commit\" git remote add origin git@github.com:rnietoe/repository_name.git git push -u origin master List remote repositories git remote git remote -v cat .git/config","title":"Remote repositories"},{"location":"Git/2-Git_Branches-Merges-and-Remotes/#remote-branches","text":"Add a remote branch git push -u origin master List remote and all branches git branch -r git branch -a Delete remote branches git push origin :branch_name git push origin --delete branch_name","title":"Remote branches"},{"location":"Git/2-Git_Branches-Merges-and-Remotes/#trackinguntraking-remote-branch","text":"git branch branch_name origin/branch_name git checkout -b branch_name origin/branch_name ??? git branch -u origin/branch_name branch_name git branch --unset-upstream branch_name","title":"Tracking/Untraking remote branch"},{"location":"Git/2-Git_Branches-Merges-and-Remotes/#push-workflow","text":"git checkout master git fetch git merge origin/master git merge local_branch git push","title":"Push workflow"},{"location":"Git/2-Git_Branches-Merges-and-Remotes/#next-steps","text":"","title":"Next steps"},{"location":"Git/2-Git_Branches-Merges-and-Remotes/#git-aliases-for-commonly-used-commands","text":"Add alias \"st = status\" to ~/.gitconfig git config --global alias.st \"status\" Other examples: st = status co = checkout ci = commit br = branch df = diff dfs = diff -stagged logg = log --graph --decorate --oneline --all","title":"Git Aliases for commonly-used commands"},{"location":"Git/2-Git_Branches-Merges-and-Remotes/#set-up-ssh-keys-for-remote-login","text":"Authenticating with GitHub from Git","title":"Set up SSH keys for remote login"},{"location":"Git/2-Git_Branches-Merges-and-Remotes/#integrated-development-environments-ides","text":"Integrate source code editing with Git features","title":"Integrated Development Environments (IDEs)"},{"location":"Git/2-Git_Branches-Merges-and-Remotes/#graphical-user-interfaces-guis","text":"They have a point-and-click interface for performing Git actions.","title":"Graphical User Interfaces (GUIs)"},{"location":"Git/3-Git-Intermediate-Techniques/","text":"Git Intermediate Techniques \u00b6 Prune \u00b6 Delete remote-tracking branches git remote prune origin --dry-run git remote prune origin git fetch --prune git fetch - p Prune all unreachable objects. Do not need to use git prune Tags \u00b6 Reference names to a commit (v1.0, v1.1, v2.0): Lightweight tag git tag tag_name commit_id Annotated tag (most common) git tag -a v1.1 -m \"Version 1.0\" commitId git tag -am \"Version 1.0\" v1.1 commitId List tags git tag git tag --list git tag -l git tag -l \"v1*\" git tag -l -n Work with tags git show v1.1 git diff v1.0..v1.1 Delete a tag git tag --delete v1.1 git tag -d v1.1 Push tags to remote server git push origin v1.1 git push origin --tags Delete remote tags git push origin :v1.1 git push --delete origin v1.1 git push -d origin v1.1 Check out tags git checkout -b new_branch v1.1 Cherry-pick \u00b6 copy a single commit or a range of commits paste in the branch (new commits have different SHAs). git cherry-pick SHA git cherry-pick SHA --edit \"edit commit message\" git cherry-pick SHA -e \"edit commit message\" git cherry-pick SHA..SHA when there are conflicts: git cherry-pick --continue git cherry-pick --abort Stage changes interactively \u00b6 Interactive way to stage changes from the working directory to the staging area: git add --interactive git add -i Hunk \u00b6 Hunk is an area where two files differ. It can be staged, skipped or split. In interactive mode, select option 5 (Patch) and use the wizard with options e (edit), s (split), y (yes) and n (not) to patch portions of codes. Patch mode is not only for interactive mode: git add --patch git add -p Patch parameter is also used in other commands: git stash -p git reset -p git checkout -p git commit -p Patches \u00b6 Diff Patches \u00b6 git diff from-commit to-commit > output.diff Apply difference to our working directory git apply output.diff Formatted Patches \u00b6 Export each commit in Unix mailbox format, for example: export all commits in a range (optional to a file) git format-patch from-commit..to-commit git format-patch from-commit..to-commit --stdout > feature.patch export a single commit git format-patch -1 commitId export all commits on current branch, which are not in master branch (optional to a directory) git format-patch master git format-patch master -o output_directory Apply formatted patches ( a pply m ailbox): git am path/file.patch git am path/*.patch Rebase \u00b6 Usefull to clean commits and keep the history cleaner. Copy commits from one branch, one-by-one, and then replaying/incorporating them at the end of another branch (commits are moved). git rebase master git rebase master new_feature Get the commitID where branch diverges (the latest commit in common) git merge-base master new_feature Merge VS rebase \u00b6 Merge and Rebase have similar ends: they incorporate changes from one branch into another branch Use merge to bring large branches back into master Use rebase to add minor commits in master to a branch Rebasing should be only used on your local, private branches or on branches that you use exclusively; not branches that others are using. Rebase is destructive when there are conflicts. Conflicts will be resolved with new changes in commits, and then: git rebase --continue git rebase --skip git rebase --abort Rebase onto other branches \u00b6 git rebase --onto base upstream branch For example: git rebase --onto master camping expenses Undo rebase \u00b6 Undoing complex rebases may loses SHAs, commit messages, change sets, etc. git reset --hard ORIG_HEAD git rebase --onto camping_commitID master expenses Interactive rebase \u00b6 git rebase -i master new_feature git rebase -i HEAD~3 with options: pick : use commit drop : remove commit reword : use commit, but edit the commit message edit : use commit, but stop for amending squash : use commit, but meld into previous commit fixup : like squash , but discard this commit's log message exec : Pull rebase \u00b6 Fetch from remote, and then rebase instead or merge git pull --rebase git pull -r git pull --rebase=preserve git pull --rebase=interactive Track Problems \u00b6 Blame \u00b6 How wrote this code and when? - who I should blame? git blame filename.txt git blame -w filename.txt git blame -L 100,150 filename.txt git blame -L 100,+50 filename.txt git blame SHA filename.txt where -w ignore whitespace Add a global alias for blame as praise git config --global alias.praise blame Annotate \u00b6 Similar to blame, with different output format git annotate filename.txt Bisect \u00b6 Find the commit that introduced a bug or regression. The last good revision and the first bad revision are marked git bisect start git bisect bad <treeish> git bisect good <treeish> git bisect reset","title":"Git Intermediate Techniques"},{"location":"Git/3-Git-Intermediate-Techniques/#git-intermediate-techniques","text":"","title":"Git Intermediate Techniques"},{"location":"Git/3-Git-Intermediate-Techniques/#prune","text":"Delete remote-tracking branches git remote prune origin --dry-run git remote prune origin git fetch --prune git fetch - p Prune all unreachable objects. Do not need to use git prune","title":"Prune"},{"location":"Git/3-Git-Intermediate-Techniques/#tags","text":"Reference names to a commit (v1.0, v1.1, v2.0): Lightweight tag git tag tag_name commit_id Annotated tag (most common) git tag -a v1.1 -m \"Version 1.0\" commitId git tag -am \"Version 1.0\" v1.1 commitId List tags git tag git tag --list git tag -l git tag -l \"v1*\" git tag -l -n Work with tags git show v1.1 git diff v1.0..v1.1 Delete a tag git tag --delete v1.1 git tag -d v1.1 Push tags to remote server git push origin v1.1 git push origin --tags Delete remote tags git push origin :v1.1 git push --delete origin v1.1 git push -d origin v1.1 Check out tags git checkout -b new_branch v1.1","title":"Tags"},{"location":"Git/3-Git-Intermediate-Techniques/#cherry-pick","text":"copy a single commit or a range of commits paste in the branch (new commits have different SHAs). git cherry-pick SHA git cherry-pick SHA --edit \"edit commit message\" git cherry-pick SHA -e \"edit commit message\" git cherry-pick SHA..SHA when there are conflicts: git cherry-pick --continue git cherry-pick --abort","title":"Cherry-pick"},{"location":"Git/3-Git-Intermediate-Techniques/#stage-changes-interactively","text":"Interactive way to stage changes from the working directory to the staging area: git add --interactive git add -i","title":"Stage changes interactively"},{"location":"Git/3-Git-Intermediate-Techniques/#hunk","text":"Hunk is an area where two files differ. It can be staged, skipped or split. In interactive mode, select option 5 (Patch) and use the wizard with options e (edit), s (split), y (yes) and n (not) to patch portions of codes. Patch mode is not only for interactive mode: git add --patch git add -p Patch parameter is also used in other commands: git stash -p git reset -p git checkout -p git commit -p","title":"Hunk"},{"location":"Git/3-Git-Intermediate-Techniques/#patches","text":"","title":"Patches"},{"location":"Git/3-Git-Intermediate-Techniques/#diff-patches","text":"git diff from-commit to-commit > output.diff Apply difference to our working directory git apply output.diff","title":"Diff Patches"},{"location":"Git/3-Git-Intermediate-Techniques/#formatted-patches","text":"Export each commit in Unix mailbox format, for example: export all commits in a range (optional to a file) git format-patch from-commit..to-commit git format-patch from-commit..to-commit --stdout > feature.patch export a single commit git format-patch -1 commitId export all commits on current branch, which are not in master branch (optional to a directory) git format-patch master git format-patch master -o output_directory Apply formatted patches ( a pply m ailbox): git am path/file.patch git am path/*.patch","title":"Formatted Patches"},{"location":"Git/3-Git-Intermediate-Techniques/#rebase","text":"Usefull to clean commits and keep the history cleaner. Copy commits from one branch, one-by-one, and then replaying/incorporating them at the end of another branch (commits are moved). git rebase master git rebase master new_feature Get the commitID where branch diverges (the latest commit in common) git merge-base master new_feature","title":"Rebase"},{"location":"Git/3-Git-Intermediate-Techniques/#merge-vs-rebase","text":"Merge and Rebase have similar ends: they incorporate changes from one branch into another branch Use merge to bring large branches back into master Use rebase to add minor commits in master to a branch Rebasing should be only used on your local, private branches or on branches that you use exclusively; not branches that others are using. Rebase is destructive when there are conflicts. Conflicts will be resolved with new changes in commits, and then: git rebase --continue git rebase --skip git rebase --abort","title":"Merge VS rebase"},{"location":"Git/3-Git-Intermediate-Techniques/#rebase-onto-other-branches","text":"git rebase --onto base upstream branch For example: git rebase --onto master camping expenses","title":"Rebase onto other branches"},{"location":"Git/3-Git-Intermediate-Techniques/#undo-rebase","text":"Undoing complex rebases may loses SHAs, commit messages, change sets, etc. git reset --hard ORIG_HEAD git rebase --onto camping_commitID master expenses","title":"Undo rebase"},{"location":"Git/3-Git-Intermediate-Techniques/#interactive-rebase","text":"git rebase -i master new_feature git rebase -i HEAD~3 with options: pick : use commit drop : remove commit reword : use commit, but edit the commit message edit : use commit, but stop for amending squash : use commit, but meld into previous commit fixup : like squash , but discard this commit's log message exec :","title":"Interactive rebase"},{"location":"Git/3-Git-Intermediate-Techniques/#pull-rebase","text":"Fetch from remote, and then rebase instead or merge git pull --rebase git pull -r git pull --rebase=preserve git pull --rebase=interactive","title":"Pull rebase"},{"location":"Git/3-Git-Intermediate-Techniques/#track-problems","text":"","title":"Track Problems"},{"location":"Git/3-Git-Intermediate-Techniques/#blame","text":"How wrote this code and when? - who I should blame? git blame filename.txt git blame -w filename.txt git blame -L 100,150 filename.txt git blame -L 100,+50 filename.txt git blame SHA filename.txt where -w ignore whitespace Add a global alias for blame as praise git config --global alias.praise blame","title":"Blame"},{"location":"Git/3-Git-Intermediate-Techniques/#annotate","text":"Similar to blame, with different output format git annotate filename.txt","title":"Annotate"},{"location":"Git/3-Git-Intermediate-Techniques/#bisect","text":"Find the commit that introduced a bug or regression. The last good revision and the first bad revision are marked git bisect start git bisect bad <treeish> git bisect good <treeish> git bisect reset","title":"Bisect"},{"location":"Security/Web-Security-OAuth-And-OpenID-Connect/","text":"Web Security: OAuth and OpenID Connect \u00b6 https://www.linkedin.com/learning/web-security-oauth-and-openid-connect?u=1009514 OAuth 2.0 Servers Map of OAuth 2.0 Specs Aaron Parecki's book OAuth 2.0 Simplified What is OAuth? \u00b6 Some OAuth Servers: https://oauth2.thephpleague.com https://developers.google.com/oauthplayground https://openidconnect.net https://developer.okta.com A token introspection tool: https://www.jsonwebtoken.io flow = grant type scopes = permissions AuthZ with: API keys Id & Secret OAuth OpenID Connect (OIDC) is an OAuth 2.0 identity extension \u2013 only for users. Core Terminology \u00b6 Main OAuth extensions /authorize : grant permission to the resource. Could return an authZ code or an access token /token : trade an authZ code or refresh token for an access token /revoke : deactivate (invalidate) a token. Valid for access or refresh tokens /instrospect : learn more about the token /register : create new OAuth clients /userinfo : retrieve profile information about the authenticated user /.well-known/openid-configuration : which endpoints are support by our OAuth server Main OAuth tokens Access token: gives the client application access to the protected resource, usually the API Refresh token: used to request a new access token when this expires ID Token (included with OIDC): user profile information JWT (Json Web Token) iss : the issuer of the token, an entity we trust sub : the subject (user) of the token aud : the audience which should consume the token exp : expiration time of the token Claims: a key/value pair within the token that gives the client application information Client Credentials: AuthZ for microservices \u00b6 Private clients only where secrets are in backend code; not appropiate for web pages or mobiles apps Must use secure communications TLS no user relationship validate access token against the /instrospect endpoint expired token has to be rejected Implicit or Hybrid: AuthZ for mobile devices \u00b6 Attach the user to the process cookie/session storage AppAuth and Passport for Android or iOS Must use secure communications TLS use of redirect_uri Authorization Code \u00b6 get an Auth Code instead of an access token. The third-party application never sees our credentials. The end user never sees the access token. Resource Owner Password Flow \u00b6 recommended only for updating legacy systems danger! credentials are managed by the application itself Server side implementations \u00b6","title":"Web Security: OAuth and OpenID Connect"},{"location":"Security/Web-Security-OAuth-And-OpenID-Connect/#web-security-oauth-and-openid-connect","text":"https://www.linkedin.com/learning/web-security-oauth-and-openid-connect?u=1009514 OAuth 2.0 Servers Map of OAuth 2.0 Specs Aaron Parecki's book OAuth 2.0 Simplified","title":"Web Security: OAuth and OpenID Connect"},{"location":"Security/Web-Security-OAuth-And-OpenID-Connect/#what-is-oauth","text":"Some OAuth Servers: https://oauth2.thephpleague.com https://developers.google.com/oauthplayground https://openidconnect.net https://developer.okta.com A token introspection tool: https://www.jsonwebtoken.io flow = grant type scopes = permissions AuthZ with: API keys Id & Secret OAuth OpenID Connect (OIDC) is an OAuth 2.0 identity extension \u2013 only for users.","title":"What is OAuth?"},{"location":"Security/Web-Security-OAuth-And-OpenID-Connect/#core-terminology","text":"Main OAuth extensions /authorize : grant permission to the resource. Could return an authZ code or an access token /token : trade an authZ code or refresh token for an access token /revoke : deactivate (invalidate) a token. Valid for access or refresh tokens /instrospect : learn more about the token /register : create new OAuth clients /userinfo : retrieve profile information about the authenticated user /.well-known/openid-configuration : which endpoints are support by our OAuth server Main OAuth tokens Access token: gives the client application access to the protected resource, usually the API Refresh token: used to request a new access token when this expires ID Token (included with OIDC): user profile information JWT (Json Web Token) iss : the issuer of the token, an entity we trust sub : the subject (user) of the token aud : the audience which should consume the token exp : expiration time of the token Claims: a key/value pair within the token that gives the client application information","title":"Core Terminology"},{"location":"Security/Web-Security-OAuth-And-OpenID-Connect/#client-credentials-authz-for-microservices","text":"Private clients only where secrets are in backend code; not appropiate for web pages or mobiles apps Must use secure communications TLS no user relationship validate access token against the /instrospect endpoint expired token has to be rejected","title":"Client Credentials: AuthZ for microservices"},{"location":"Security/Web-Security-OAuth-And-OpenID-Connect/#implicit-or-hybrid-authz-for-mobile-devices","text":"Attach the user to the process cookie/session storage AppAuth and Passport for Android or iOS Must use secure communications TLS use of redirect_uri","title":"Implicit or Hybrid: AuthZ for mobile devices"},{"location":"Security/Web-Security-OAuth-And-OpenID-Connect/#authorization-code","text":"get an Auth Code instead of an access token. The third-party application never sees our credentials. The end user never sees the access token.","title":"Authorization Code"},{"location":"Security/Web-Security-OAuth-And-OpenID-Connect/#resource-owner-password-flow","text":"recommended only for updating legacy systems danger! credentials are managed by the application itself","title":"Resource Owner Password Flow"},{"location":"Security/Web-Security-OAuth-And-OpenID-Connect/#server-side-implementations","text":"","title":"Server side implementations"}]}